// #################################### AOI #######################################

var AOI = ee.FeatureCollection('projects/aotealandslides/assets/aotea');

Map.addLayer(AOI, {color: 'red'}, 'aotea');

Map.centerObject(AOI, 11);


// ################################# SCALING FACTORS ###############################

// ------------------------ Landsat 4-7 scaling -------------------------

function applyL47ScaleFactors(image) {
  var opticalBands = image.select('SR_B.').multiply(0.0000275).add(-0.2);
  return image.addBands(opticalBands, null, true);
}


// #################################### MASKING #####################################

// ------------------------- cloudmasking Landsat 4-7 -------------------------

function maskCloudsQA(image) {
  var cloudShadowBitMask = (1 << 3);
  var cloudsBitMask = (1 << 5);
  var qa = image.select('QA_PIXEL');
  var mask = qa.bitwiseAnd(cloudShadowBitMask).eq(0)
              .and(qa.bitwiseAnd(cloudsBitMask).eq(0));
  return image.updateMask(mask);
}

//----------------------------- advanced cloudmasking Landsat 4,5,7 using manually calculated Cloud Score  ----------------------

//Function that rescales (between 1 and 0) for cloud score (A helper to apply an expression and linearly rescale the output)) and renames bnads
function rescale(imag, exp, thresholds) { 
  return imag.expression(exp, {
      'blue': imag.select('SR_B1'), // Remnaming the bands to be called in 'calcCloudScore' function
      'green': imag.select('SR_B2'),
      'red': imag.select('SR_B3'),
      'nir': imag.select('SR_B4'),
      'swir1': imag.select('SR_B5'),
      'swir2': imag.select('SR_B7')
    })
    .subtract(thresholds[0])
    .divide(thresholds[1] - thresholds[0]);
}

// Function to manually compute a cloud score (rename occurs via rescale function)
// Does not rely on S2 Cloud Probabilty Band (NOTE: useful for LandSat data in the future which does not have an autmatically derived 'Cloud Probabiliy' band in the GEE catalog)
function calcCloudScore(img) { 
  var score = ee.Image(1.0); 
  // Clouds are reasonably bright in the blue band. 
  score = score.min(rescale(img, 'blue', [0.05, 0.3]));  // BLUE BAND THRESHOLD INPUT
  // Clouds are reasonably bright in all visible bands. 
  score = score.min(rescale(img, 'red + green + blue', [0.1, 0.8])); // VISIBLE BANDS THRESHOLD INPUT
  // Clouds are reasonably bright in all infrared bands. 
  score = score.min(rescale(img, 'nir + swir1 + swir1', [0.15, 0.8]));  // NEAR-INFRARED AND SHORT-WAVE-INFRARED THRESHOLD INPUT
  return score;
}
// The HIGHER the cloud score, the MORE LIKELY the pixel is cloud

// CLOUD SCORE THRESHOLD INPUT
var maxCloudScore = 0.1
// Define the cloud score masking function NO Buffer
function maskCloudScoreNoBuffer(img2, score2) {
  // Create a cloud mask where cloud score is greater than...
  var cloudMask = score2.gt(maxCloudScore);
  return img2.updateMask(cloudMask.not());
}


// BUFFER DISTANCE OFF OF SCORE MASK THRESHOLD INPUT
var bufferScoreDistance = 100; //meters  
// Define the cloud score  masking function WITH buffer
function maskCloudScoreWithBuffer(img1, score1) {
  // Create a cloud mask where cloud score is greater than...
  var cloudMask = score1.gt(maxCloudScore);
  // Use fastDistanceTransform() to compute distance from clouds in meters
  var distanceFromClouds = cloudMask.fastDistanceTransform(30);  // 30 meters distance, adjust as needed
  // Create a buffer mask where distance is less than or equal to the desired buffer size
  var bufferMask = distanceFromClouds.lte(bufferScoreDistance);
  // Combine the cloud mask and buffer mask to mask both clouds and surrounding pixels
  var combinedMask = cloudMask.or(bufferMask);
  // Apply the combined mask to the image
  return img1.updateMask(combinedMask.not());  // Invert the mask (cloud + buffer masked)
}

//################################################# HIGH ABSTRACT PROCESSING ##################################################################
// (applying cloud masking functions from section above to later map to S2 image collections)

// Cloud Score and QA mask WITH buffer off of clouds
function processCloudSoreWithBuffer(img) {
    var QAmask = maskCloudsQA(img.clip(AOI));
    var cloudScorePostMask = maskCloudScoreWithBuffer(QAmask, calcCloudScore(QAmask))
    return cloudScorePostMask;
}

// Cloud Score and QA mask WITHOUT buffer off of clouds
function processCloudSoreNoBuffer(img) {
    var QAmask = maskCloudsQA(img.clip(AOI));
    var cloudScorePostMask = maskCloudScoreNoBuffer(QAmask, calcCloudScore(QAmask))
    return cloudScorePostMask;
}

// #################################### VISUALIZATIONS ####################################

// ------------------------ Landsat 4-7 visualization-------------------------

var L47_vis = {
  bands: ['SR_B3', 'SR_B2', 'SR_B1'],
  min: 0.0,
  max: 0.3,
};


// #################################### IMAGE COLLECTION & COMPOSING ####################################

// ------------------------- LANDSAT 4-7 COMPOSITE -------------------------

for (var year = 2012; year <= 2014; year++) {
  var start = year + '-10-01';
  var end = (year + 1) + '-01-31';  // Include October to January of the following year

  var L47 = ee.ImageCollection('LANDSAT/LT04/C02/T1_L2')
                .merge(ee.ImageCollection('LANDSAT/LT05/C02/T1_L2'))
                .merge(ee.ImageCollection('LANDSAT/LE07/C02/T1_L2'))
                .filterDate(start, end)
                .filterBounds(AOI)
                .filterMetadata('CLOUD_COVER', 'less_than', 20)
                .map(applyL47ScaleFactors)
                // .map(maskL47clouds)
                // .median()
                // .clip(AOI);

  // Add the composite to the map
// Map.addLayer(L47, L47_vis, 'L47_' + year);

// ########################################### OUTPUTS ####################################################
// // No Buffer Composite With Double Cloud Masking (both QA and Score cloud filters to all images in the collection)
// Used to fill in the top area of island where probability data is not availiable
var SCOREcompositeNoBuffer = L47.map(processCloudSoreNoBuffer).median().clip(AOI);
// Map.addLayer(SCOREcompositeNoBuffer, L47_vis, 'L47 Composite-ScoreMaskNoBuffer ' + year);


// // Composite WITH Double Cloud Masking (both QA band and calculated 'cloudScore' cloud filters to all images in the collection) AND cloud buffer mask
var SCOREcompositeWithBuffer = L47.map(processCloudSoreWithBuffer).median().clip(AOI);
Map.addLayer(SCOREcompositeWithBuffer, L47_vis, 'L47 Composite-ScoreMaskWITHBuffer ' + year);


// #######################################  NDVI DISPLAY ##################################################
// Calculate Normalized Difference Vegetation Index (NDVI)
// 'NIR' (SR_B4) and 'RED' (SR_B3) 
// var ndvi = L47.normalizedDifference(['SR_B4', 'SR_B3']).rename(['ndvi']); 
// // Visualize it 
// var ndviVis = {min:0, max:1, palette: ['orange', 'green']}; 
// Map.centerObject(AOI, 10) 
// Map.addLayer(ndvi.clip(aotea), ndviVis, 'ndvi');
}

// END ANNUAL FOR LOOP
